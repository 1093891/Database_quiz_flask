id,type,difficulty,question,options,correct_answer,explanation
java_q1,mcq,hard,"Which class relationship describes an ""is-a"" relationship where a subclass extends a superclass, enabling method overriding?", "Association|Aggregation|Composition|Inheritance",3,"Inheritance represents an ""is-a"" relationship, where a subclass (child) extends a superclass (parent), allowing the subclass to inherit properties and methods and override them (e.g., `Dog extends Animal`)."
java_q2,true_false,hard,"In JavaFX, a Stage is a container for UI elements like buttons and text fields.",,false,"False. In JavaFX, a `Scene` is the container for UI elements (nodes) within a `Stage`. The `Stage` is the top-level window."
java_q3,fill_in_the_blank,hard,"The `________` method is used on a JavaFX `Button` to register an action event listener.", "setOnAction",,"The `setOnAction` method is used on `Button` (and other `ButtonBase` subclasses) to specify the event handler for `ActionEvent`s triggered by user interaction."
java_q4,drag_drop,hard,"Match the JavaFX layout pane to its primary arrangement.","drag1:StackPane|drag2:FlowPane|drag3:GridPane|drag4:BorderPane|drag5:HBox|drag6:VBox;drop1:Places nodes on top of each other in the center.|drop2:Places nodes row-by-row horizontally or column-by-column vertically.|drop3:Places nodes in cells in a two-dimensional grid.|drop4:Places nodes in top, right, bottom, left, and center regions.|drop5:Places nodes in a single row.|drop6:Places nodes in a single column.;drag1:drop1|drag2:drop2|drag3:drop3|drag4:drop4|drag5:drop5|drag6:drop6","","`StackPane` layers nodes in the center. `FlowPane` arranges them in a flow. `GridPane` uses a grid. `BorderPane` uses cardinal regions. `HBox` arranges horizontally, and `VBox` vertically."
java_q5,trace_the_output,hard,"What is the console output of the following Java code snippet?\n```java\npublic class Test {\n    private int data = 10;\n    public void m() {\n        System.out.println(\"Outer method called\");\n    }\n    class Inner {\n        public void mi() {\n            data++;\n            m();\n            System.out.println(\"Inner method: \" + data);\n        }\n    }\n    public static void main(String[] args) {\n        Test outer = new Test();\n        Test.Inner inner = outer.new Inner();\n        inner.mi();\n    }\n}\n```", "Outer method called\nInner method: 11",,"The `mi()` method in the inner class increments `data` (from 10 to 11), calls `m()` from the outer class, and then prints the updated `data` value. Inner classes have direct access to outer class members."
java_q6,write_full_code,hard,"Write the JavaFX code to create a simple window (Stage) with a Scene containing a single Button labeled 'Click Me'. The stage title should be 'My App'.",,"```java\nimport javafx.application.Application;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Button;\nimport javafx.scene.layout.StackPane;\nimport javafx.stage.Stage;\n\npublic class MyApp extends Application {\n    @Override\n    public void start(Stage primaryStage) {\n        Button btn = new Button(\"Click Me\");\n        StackPane root = new StackPane();\n        root.getChildren().add(btn);\n        Scene scene = new Scene(root, 300, 200);\n\n        primaryStage.setTitle(\"My App\");\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n```",,"This code creates a basic JavaFX application. It extends `Application`, overrides `start()`, creates a `Button`, places it in a `StackPane` (a basic layout pane), creates a `Scene` with the pane, sets the `Stage` title, attaches the scene, and finally displays the stage."
java_q7,mcq,hard,"What is the main distinction of a 'Composition' relationship compared to 'Aggregation'?", "Parts can exist independently of the whole.|Neither class owns the other; they just interact.|It's a strong ""owns-a"" relationship where the part cannot exist without the whole.|It involves a subclass extending a superclass.",2,"Composition is a strong ""owns-a"" relationship, implying that the parts' lifecycle is dependent on the whole. If the whole is destroyed, the parts are also destroyed (e.g., a Room cannot exist without its House)."
java_q8,true_false,hard,"JavaFX Swing and AWT are newer GUI frameworks that replaced JavaFX for rich internet applications.",,false,"False. JavaFX is the newer GUI framework that replaced Swing and AWT. Swing replaced AWT previously."
java_q9,fill_in_the_blank,hard,"An `EventHandler<T>` is a `_________` interface in JavaFX, meaning it defines a single abstract method.", "functional",,"`EventHandler<T>` is a functional interface because it has only one abstract method (`handle`). This allows it to be used with lambda expressions."
java_q10,drag_drop,hard,"Order the JavaFX main components in their hierarchical relationship from top-level to contained elements.","drag1:Node|drag2:Stage|drag3:Scene|drag4:Parent;drop1:Top-level window|drop2:Container for UI elements|drop3:Base class for layout panes and controls|drop4:Base class for all graphical elements.;drag1:drop4|drag2:drop1|drag3:drop2|drag4:drop3","","The `Stage` is the main window. The `Scene` contains the UI elements. `Parent` is a base class for nodes that can contain other nodes (like layout panes and controls). `Node` is the most general base class for all graphical elements."
java_q11,trace_the_output,hard,"What is the console output when a `DoubleProperty`'s value is changed after an `InvalidationListener` is attached?\n```java\nimport javafx.beans.property.DoubleProperty;\nimport javafx.beans.property.SimpleDoubleProperty;\nimport javafx.beans.value.Observable;\nimport javafx.beans.value.InvalidationListener;\n\npublic class ObservableDemo {\n    public static void main(String[] args) {\n        final DoubleProperty balance = new SimpleDoubleProperty(0.0);\n        balance.addListener(new InvalidationListener() {\n            @Override\n            public void invalidated(Observable ov) {\n                System.out.println(\"Balance invalidated!\");\n            }\n        });\n        balance.set(10.5);\n        balance.set(10.5); // Setting the same value again\n    }\n}\n```", "Balance invalidated!",,"An `InvalidationListener` is notified only when the property *becomes invalid*, which typically means its value *changes*. Setting the same value again (10.5) after it's already 10.5 will not trigger another invalidation. The first `set(10.5)` from 0.0 will trigger it."
java_q12,write_full_code,hard,"Write the Java code for a `Teacher` class that has `name` (String) and `age` (int) and a method `teachAt(School school)` that prints ""[Teacher Name] teaches at [School Name]"". Also, provide a `School` class with `name` (String) and `address` (String) and a `getName()` method. This demonstrates an 'Association' relationship.",,"```java\npublic class School {\n    private String name;\n    private String address;\n\n    public School(String name, String address) {\n        this.name = name;\n        this.address = address;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n}\n\npublic class Teacher {\n    private String name;\n    private int age;\n\n    public Teacher(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public void teachAt(School school) {\n        System.out.println(name + \" teaches at \" + school.getName());\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n```",,"This code defines `School` and `Teacher` classes. The `Teacher` class has a `teachAt` method that takes a `School` object, demonstrating a ""uses"" relationship (Association), where neither class owns the other, but they interact."
java_q13,mcq,hard,"Which of the following is an advantage of using an 'Inner Class' as an event listener in JavaFX?", "It must be declared static.|It cannot reference data or methods from the outer class.|It can simplify code by directly accessing outer class members.|It is automatically instantiated when the outer class is created.",2,"An inner class can reference data and methods defined in its containing outer class, making programs more concise as you don't need to pass outer class references. It does not have to be static unless it doesn't need outer instance data."
java_q14,true_false,hard,"An anonymous inner class in JavaFX must always implement all abstract methods of its superclass or interface.",,true,"True. Anonymous inner classes are used to provide a quick, one-time implementation of an interface or a subclass, and thus they must implement all abstract methods of the superclass or interface they are based on."
java_q15,fill_in_the_blank,hard,"JavaFX's `FadeTransition` class animates the change of the `________` in a `Node` over a given time.", "opacity",,"The `FadeTransition` class specifically animates the `opacity` property of a `Node`."
java_q16,drag_drop,hard,"Match the `MouseEvent` property to its description.","drag1:getX()|drag2:getClickCount()|drag3:isControlDown();drop1:Returns the x-coordinate of the mouse point in the event source node.|drop2:Returns the number of mouse clicks associated with this event.|drop3:Returns true if the Control key is pressed on this event.;drag1:drop1|drag2:drop2|drag3:drop3","","`getX()` gives the X-coordinate. `getClickCount()` provides the number of clicks. `isControlDown()` checks if the Control key is pressed."
java_q17,trace_the_output,hard,"What is the value of `balance` when `valueLabel.setText(String.valueOf(newValue.intValue()));` is executed if `oldValue` was `50.0` and `newValue` is `75.5`?\n```java\n// Assume slider.valueProperty().addListener is set up as in SliderDemo\n// ...\npublic void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {\n    valueLabel.setText(String.valueOf(newValue.intValue()));\n}\n// ...\n```", "75",,"The `newValue.intValue()` method converts the `Double` `newValue` (75.5) to an `int` by truncating the decimal part. So, 75.5 becomes 75."
java_q18,write_full_code,hard,"Write the Java code for a `Department` class (as the whole) that `has-a` `Professor`s (as parts), demonstrating 'Aggregation'. The `Professor` class should have `name` and `specialization`. The `Department` class should have a `name` and a list of `Professor` objects, with an `addProfessor` method.",,"```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Professor {\n    private String name;\n    private String specialization;\n\n    public Professor(String name, String specialization) {\n        this.name = name;\n        this.specialization = specialization;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void teach() {\n        System.out.println(name + \" is teaching \" + specialization);\n    }\n}\n\npublic class Department {\n    private String name;\n    private List<Professor> professors = new ArrayList<>();\n\n    public Department(String name) {\n        this.name = name;\n    }\n\n    public void addProfessor(Professor p) {\n        professors.add(p);\n    }\n\n    public List<Professor> getProfessors() {\n        return professors;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n```",,"This demonstrates Aggregation: A `Department` has `Professor`s. `Professor` objects can exist independently of a `Department` (e.g., a professor might teach at different departments over time, or be unassigned)."
java_q19,mcq,hard,"Which of the following is a primary purpose of using binding properties in JavaFX?", "To directly manipulate UI elements using CSS.|To prevent event handling for certain nodes.|To automatically synchronize the value of a target property with a source property.|To define custom animations for shapes.",2,"Binding properties allow automatic synchronization between a target property and a source property. If the source property's value changes, the target property's value is automatically updated, simplifying UI updates and data flow."
java_q20,true_false,hard,"The `Image` class in JavaFX represents a view of a media being played by a `MediaPlayer`.",,false,"False. The `MediaView` class is a `Node` subclass that provides a view of `Media` being played by a `MediaPlayer`. The `Image` class represents a graphical image itself, loaded from a file or URL."
java_q21,fill_in_the_blank,hard,"The `ImageView` class has `fitWidth` and `fitHeight` properties which define the bounding box within which the image is `_______` to fit.", "resized",,"`fitWidth` and `fitHeight` properties are used to `resize` the image displayed in an `ImageView` to fit within the specified dimensions."
java_q22,drag_drop,hard,"Match the JavaFX UI control to its primary use.","drag1:Label|drag2:Button|drag3:TextField|drag4:CheckBox|drag5:RadioButton;drop1:Display short text or label other controls.|drop2:Trigger an action event when clicked.|drop3:Enter or display a single line of text input.|drop4:Allow user to make a selection (can be multiple).|drop5:Choose a single item from a group of choices.;drag1:drop1|drag2:drop2|drag3:drop3|drag4:drop4|drag5:drop5","","`Label` displays text. `Button` triggers actions. `TextField` for single-line input. `CheckBox` for multiple selections. `RadioButton` for single selection from a group."
java_q23,trace_the_output,hard,"What will be printed to the console when the `bark()` method is called on the `myDog` object?\n```java\npublic class Animal {\n    public void speak() {\n        System.out.println(\"Animal sound\");\n    }\n}\n\npublic class Dog extends Animal {\n    @Override\n    public void speak() {\n        System.out.println(\"Woof!\");\n    }\n    public void bark() {\n        speak(); // Calls the overridden method\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Dog myDog = new Dog();\n        myDog.bark();\n    }\n}\n```", "Woof!",,"The `bark()` method in the `Dog` class calls `speak()`. Since `speak()` is overridden in `Dog`, the `Dog` class's `speak()` implementation (`Woof!`) will be executed, demonstrating polymorphism."
java_q24,write_full_code,hard,"Write the Java code for an `Employee` class that demonstrates 'Self-Aggregation'. The `Employee` class should have a `name` and a `List<Employee>` named `subordinates`, with an `addSubordinate` method.",,"```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Employee {\n    private String name;\n    private List<Employee> subordinates = new ArrayList<>();\n\n    public Employee(String name) {\n        this.name = name;\n    }\n\n    public void addSubordinate(Employee e) {\n        subordinates.add(e);\n    }\n\n    public List<Employee> getSubordinates() {\n        return subordinates;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n```",,"This `Employee` class has a list of `Employee` objects as subordinates, demonstrating self-aggregation, which is common in hierarchical structures like organizational charts."
java_q25,mcq,hard,"Which JavaFX class is specifically designed to work with keyframes for programming any animation using one or more `KeyFrame` objects?", "Animation|PathTransition|FadeTransition|Timeline",3,"The `Timeline` class in JavaFX is used for programming general animations using one or more `KeyFrame`s, executed sequentially at specified time intervals. `PathTransition` and `FadeTransition` are specialized animations."
java_q26,true_false,hard,"When a `Button` is clicked in JavaFX, it triggers a `MouseEvent`.",,false,"False. A `Button` click primarily triggers an `ActionEvent`. While a mouse click is involved, the specific event type for button actions is `ActionEvent`."
java_q27,fill_in_the_blank,hard,"The `______` coordinate system in JavaFX has its origin (0,0) at the top-left corner.", "JavaFX",,"The JavaFX coordinate system has its origin (0,0) at the top-left corner, with positive x extending to the right and positive y extending downwards."
java_q28,drag_drop,hard,"Match the JavaFX `Shape` class to the geometric figure it draws.","drag1:Line|drag2:Circle|drag3:Rectangle|drag4:Ellipse|drag5:Arc;drop1:Straight line segment.|drop2:Circular shape defined by center and radius.|drop3:Rectangular shape defined by upper-left corner, width, and height.|drop4:Oval shape defined by center, horizontal, and vertical radii.|drop5:Segment of an ellipse.;drag1:drop1|drag2:drop2|drag3:drop3|drag4:drop4|drag5:drop5","","`Line` draws a line. `Circle` draws a circle. `Rectangle` draws a rectangle. `Ellipse` draws an ellipse. `Arc` draws an arc, which is a segment of an ellipse."
java_q29,trace_the_output,hard,"What is the output if `btOK.setOnAction(new EventHandler<ActionEvent>() { @Override public void handle(ActionEvent event) { System.out.println(\"OK clicked\"); } });` is set up and the OK button is clicked three times?\n```java\n// Relevant setup\nButton btOK = new Button(\"OK\");\n// Event handling setup as above...\n```", "OK clicked\nOK clicked\nOK clicked",,"Each time the `btOK` button is clicked, its `setOnAction` listener will be invoked, and the `handle` method inside the `EventHandler` will execute, printing ""OK clicked"" to the console."
java_q30,write_full_code,hard,"Write the JavaFX code to create a `Label` with the text ""Hello JavaFX"" and set its text color to red. Use `javafx.scene.paint.Color`.",,"```java\nimport javafx.application.Application;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Label;\nimport javafx.scene.layout.StackPane;\nimport javafx.scene.paint.Color;\nimport javafx.stage.Stage;\n\npublic class StyledLabelApp extends Application {\n    @Override\n    public void start(Stage primaryStage) {\n        Label label = new Label(\"Hello JavaFX\");\n        label.setTextFill(Color.RED);\n\n        StackPane root = new StackPane();\n        root.getChildren().add(label);\n        Scene scene = new Scene(root, 300, 200);\n\n        primaryStage.setTitle(\"Styled Label\");\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n```",,"This code demonstrates creating a `Label` and applying a text color using `setTextFill()` method with `Color.RED`."
java_q31,mcq,hard,"Which `KeyEvent` method returns the character associated with the key in the event?", "getKeyCode()|getText()|getCharacter()|isShiftDown()",2,"The `getCharacter()` method of `KeyEvent` returns the `String` character associated with the key pressed or typed that triggered the event."
java_q32,true_false,hard,"A lambda expression in Java can be used with any interface, regardless of the number of abstract methods it defines.",,false,"False. Lambda expressions can only be used with *functional interfaces*, which are interfaces that define a *single abstract method* (SAM - Single Abstract Method) interface."
java_q33,fill_in_the_blank,hard,"`DoubleProperty` and `SimpleDoubleProperty` are used in JavaFX to allow tracking `________` to a `double` value and notifying listeners.", "changes",,"`DoubleProperty` and `SimpleDoubleProperty` provide an observable wrapper for a `double` value, enabling the tracking of `changes` to that value and notifying registered listeners."
java_q34,drag_drop,hard,"Match the JavaFX media class to its role.","drag1:Media|drag2:MediaPlayer|drag3:MediaView;drop1:Obtains the source of the media.|drop2:Plays and controls the media.|drop3:Displays the video view of the media.;drag1:drop1|drag2:drop2|drag3:drop3","","`Media` provides the source. `MediaPlayer` handles playback control. `MediaView` is the UI component for displaying the video."
java_q35,trace_the_output,hard,"Given the code, what is the output if `age` is 25 and `name` is ""Alice""?\n```java\npublic class Animal {\n    private String name;\n    private int age;\n    public Animal(String name, int age) { this.name = name; this.age = age; }\n    public void speak() { System.out.println(\"Animal sound\"); }\n    public String getName() { return name; }\n}\npublic class Dog extends Animal {\n    private String breed;\n    public Dog(String name, int age, String breed) { super(name, age); this.breed = breed; }\n    @Override\n    public void speak() { System.out.println(\"Woof!\"); }\n    public String getBreed() { return breed; }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Animal myAnimal = new Dog(\"Buddy\", 3, \"Golden Retriever\");\n        myAnimal.speak();\n    }\n}\n```", "Woof!",,"This demonstrates polymorphism. Even though `myAnimal` is declared as an `Animal` type, it is instantiated as a `Dog`. When `speak()` is called, the JVM uses the actual object's type (`Dog`) to invoke the overridden `speak()` method from the `Dog` class."
java_q36,write_full_code,hard,"Write the JavaFX code for a `TextArea` that has 5 preferred rows and 20 preferred columns, and has `wrapText` enabled. Set an initial text ""This is a multi-line text example."".",,"```java\nimport javafx.application.Application;\nimport javafx.scene.Scene;\nimport javafx.scene.control.TextArea;\nimport javafx.scene.layout.StackPane;\nimport javafx.stage.Stage;\n\npublic class WrappedTextAreaApp extends Application {\n    @Override\n    public void start(Stage primaryStage) {\n        TextArea textArea = new TextArea(\"This is a multi-line text example.\");\n        textArea.setPrefRowCount(5);\n        textArea.setPrefColumnCount(20);\n        textArea.setWrapText(true);\n\n        StackPane root = new StackPane();\n        root.getChildren().add(textArea);\n        Scene scene = new Scene(root, 400, 300);\n\n        primaryStage.setTitle(\"Wrapped Text Area\");\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n```",,"This code creates a `TextArea` with specific preferred row and column counts, and enables text wrapping, which is useful for displaying longer blocks of text within a fixed area."
java_q37,mcq,hard,"Which of the following describes a 'Self-Aggregation' relationship?", "A class interacts with another class, but neither owns the other.|One class contains another, and the part cannot exist independently.|A subclass extends a superclass.|A class has an aggregation relationship with itself (e.g., an Employee managing other Employees).",3,"Self-aggregation is when a class has a 'has-a' relationship with instances of its own type, often seen in tree-like or hierarchical structures where objects of the same class are related to each other (e.g., an `Employee` having a list of `Employee` subordinates)."
java_q38,true_false,hard,"In JavaFX, the `Color` class allows creating colors by specifying RGB values in the range 0 to 1.0 or 0 to 255.",,true,"True. The `Color` class provides constructors to create colors using RGB values as `double` (0.0-1.0) or `int` (0-255), optionally with an opacity value."
java_q39,fill_in_the_blank,hard,"Event-driven programming in JavaFX means that code execution occurs upon activation of `______`.", "events",,"In event-driven programming, the flow of the program is determined by user actions or other system occurrences, which are handled as `events`."
java_q40,drag_drop,hard,"Match the JavaFX scene graph component to its base class or type.","drag1:Shape|drag2:ImageView|drag3:Control|drag4:Pane;drop1:Node|drop2:Node|drop3:Parent|drop4:Parent;drag1:drop1|drag2:drop1|drag3:drop3|drag4:drop3","","`Shape` and `ImageView` are direct subclasses of `Node`. `Control` and `Pane` are subclasses of `Parent`, which in turn is a subclass of `Node`."
java_q41,trace_the_output,hard,"What is the output when an anonymous inner class is used for an `ActionEvent`?\n```java\nimport javafx.application.Application;\nimport javafx.event.ActionEvent;\nimport javafx.event.EventHandler;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Button;\nimport javafx.scene.layout.StackPane;\nimport javafx.stage.Stage;\n\npublic class AnonymousHandler extends Application {\n    @Override\n    public void start(Stage primaryStage) {\n        Button btn = new Button(\"Test Button\");\n        btn.setOnAction(new EventHandler<ActionEvent>() {\n            @Override\n            public void handle(ActionEvent event) {\n                System.out.println(\"Anonymous handler invoked!\");\n            }\n        });\n        StackPane root = new StackPane();\n        root.getChildren().add(btn);\n        primaryStage.setScene(new Scene(root, 200, 100));\n        primaryStage.show();\n    }\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n// Assume the button is clicked by the user after launch.\n```", "Anonymous handler invoked!",,"When the button is clicked, the `handle` method of the anonymous `EventHandler` will be called, printing the specified message to the console. The output happens only once per click."
java_q42,write_full_code,hard,"Write the JavaFX code to create a `Button` with the text ""OK"" and an `ImageView` displaying an image from the URL `https://placehold.co/30x30/000000/FFFFFF?text=ICON`. The image should be 30x30 pixels. The button should have the image to its left.",,"```java\nimport javafx.application.Application;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Button;\nimport javafx.scene.image.Image;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.layout.StackPane;\nimport javafx.stage.Stage;\n\npublic class ButtonWithGraphic extends Application {\n    @Override\n    public void start(Stage primaryStage) {\n        // Load the image\n        Image iconImage = new Image(\"[https://placehold.co/30x30/000000/FFFFFF?text=ICON](https://placehold.co/30x30/000000/FFFFFF?text=ICON)\", 30, 30, true, true);\n        ImageView iconImageView = new ImageView(iconImage);\n\n        // Create the button with text and graphic\n        Button button = new Button(\"OK\", iconImageView);\n\n        StackPane root = new StackPane();\n        root.getChildren().add(button);\n        Scene scene = new Scene(root, 200, 100);\n\n        primaryStage.setTitle(\"Button with Icon\");\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n```",,"This code uses the `Image` and `ImageView` classes to load and display an image. The `Button` constructor `Button(String text, Node graphic)` is used to place the `ImageView` (which is a `Node`) directly within the button, to the left of the text by default."
java_q43,mcq,hard,"Which of the following is a drawback of using named inner classes for event handling in JavaFX?", "They cannot access outer class members.|They make the code more concise.|They are designed to be shared by multiple applications.|They might lead to more verbose code for simple, one-time handlers.",3,"Named inner classes can increase verbosity for simple event handlers that are only used once, as they require a separate class definition. Anonymous inner classes or lambda expressions are often preferred for conciseness in such cases."
java_q44,true_false,hard,"JavaFX's `MediaPlayer` class includes properties like `autoPlay`, `volume`, and `totalDuration` to control media playback.",,true,"True. `MediaPlayer` provides comprehensive control over media playback, including `autoPlay` for automatic start, `volume` for audio level, and `totalDuration` for media length."
java_q45,fill_in_the_blank,hard,"The `TableView` UI control in JavaFX is used to display data in a `______` format.", "tabular",,"The `TableView` control is designed to display data in a `tabular` format, with rows and columns, for structured data presentation."
java_q46,drag_drop,hard,"Match the JavaFX `ScrollBar` property to its function.","drag1:min|drag2:max|drag3:value|drag4:unitIncrement|drag5:blockIncrement;drop1:The minimum value represented by this scroll bar.|drop2:The maximum value represented by this scroll bar.|drop3:Current value of the scroll bar.|drop4:Amount to adjust when increment/decrement methods are called.|drop5:Amount to adjust if track of the bar is clicked.;drag1:drop1|drag2:drop2|drag3:drop3|drag4:drop4|drag5:drop5","","`min` and `max` define the range. `value` is the current position. `unitIncrement` is for small adjustments (arrow clicks). `blockIncrement` is for larger adjustments (track clicks)."
java_q47,trace_the_output,hard,"Given the `SliderDemo` code snippet for value change listener, what is printed if the slider `newValue` is 42.99?\n```java\n// ... in a ChangeListener<Number> for a Slider's valueProperty()\npublic void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {\n    System.out.println(String.valueOf(newValue.intValue()));\n}\n// ...\n```", "42",,"The `intValue()` method truncates the decimal part of a `Number` (like `Double`). So, 42.99 becomes 42 when converted to an `int`."
java_q48,write_full_code,hard,"Write the basic Java code for a simple `Button` and its `ActionEvent` handler using a Lambda Expression that prints ""Button clicked!"" to the console.",,"```java\nimport javafx.application.Application;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Button;\nimport javafx.scene.layout.StackPane;\nimport javafx.stage.Stage;\n\npublic class LambdaButton extends Application {\n    @Override\n    public void start(Stage primaryStage) {\n        Button btn = new Button(\"Lambda Button\");\n        \n        // Using a Lambda Expression for the event handler\n        btn.setOnAction(event -> {\n            System.out.println(\"Button clicked!\");\n        });\n\n        StackPane root = new StackPane();\n        root.getChildren().add(btn);\n        Scene scene = new Scene(root, 200, 100);\n\n        primaryStage.setTitle(\"Lambda Demo\");\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n```",,"This code demonstrates the concise syntax of a lambda expression for handling a button's action event. The `event -> { ... }` is a direct implementation of the `EventHandler` functional interface."
java_q49,mcq,hard,"Which of the following event types is NOT a direct subclass of `MouseEvent` in JavaFX?", "Mouse pressed|Mouse released|Mouse clicked|Key pressed",3,"`Key pressed` events are handled by `KeyEvent`, which is a subclass of `InputEvent`, but not directly a `MouseEvent`. `Mouse pressed`, `Mouse released`, and `Mouse clicked` are all `MouseEvent` types."
java_q50,true_false,hard,"JavaFX is prone to platform-specific bugs, similar to AWT.",,false,"False. JavaFX, like Swing, aims to be less prone to platform-specific bugs compared to AWT, as it paints components directly using Java code rather than relying heavily on native GUI resources."
java_q51,mcq,hard,"What is the primary role of an `ObservableList` in JavaFX, especially when used with UI controls like `ComboBox` or `ListView`?", "It stores data as a fixed-size array for performance.|It is a utility for parsing JSON data into Java objects.|It provides an observable collection of items that can automatically update the UI when changes occur.|It defines the styling properties for UI controls.",2,"`ObservableList` is a key JavaFX interface that provides a dynamic, observable collection. When its contents change (items added, removed, or modified), it notifies its listeners, allowing bound UI controls to automatically update and reflect these changes without manual intervention."
java_q52,true_false,hard,"The `TextField` control in JavaFX is primarily designed for entering or displaying multiple lines of text.",,false,"False. `TextField` is for single-line text input. `TextArea` is designed for multiple lines of text."
java_q53,fill_in_the_blank,hard,"In JavaFX, the `Media` class is used to obtain the `______` of the media.", "source",,"The `Media` class represents the media resource itself and is used to obtain its `source` (e.g., a URL to a video file)."
java_q54,drag_drop,hard,"Match the `MediaPlayer` property to its function.","drag1:autoPlay|drag2:cycleCount|drag3:mute|drag4:volume;drop1:Specifies whether playback should start automatically.|drop2:Specifies the number of times the media will be played.|drop3:Specifies whether the audio is muted.|drop4:The volume level for the audio.;drag1:drop1|drag2:drop2|drag3:drop3|drag4:drop4","","`autoPlay` controls automatic playback. `cycleCount` sets repetition. `mute` mutes audio. `volume` controls audio level."
java_q55,trace_the_output,hard,"Analyze the output of the following Java code given the `Department` and `Professor` classes from the 'Aggregation' example.\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Professor p1 = new Professor(\"Dr. Smith\", \"Physics\");\n        Professor p2 = new Professor(\"Dr. Jones\", \"Chemistry\");\n        Department science = new Department(\"Science\");\n        science.addProfessor(p1);\n        science.addProfessor(p2);\n        for (Professor p : science.getProfessors()) {\n            p.teach();\n        }\n    }\n}\n// Assume Professor and Department classes are defined as in the Class Relationships example.\n```", "Dr. Smith is teaching Physics\nDr. Jones is teaching Chemistry",,"The code creates two `Professor` objects and adds them to a `Department`. It then iterates through the list of professors in the department and calls the `teach()` method on each, resulting in their specific teaching messages being printed."
java_q56,write_full_code,hard,"Write the JavaFX code to load and play a video from a mock URL `http://example.com/mock_video.mp4` using `Media`, `MediaPlayer`, and `MediaView`. Do not include UI controls, just the basic media display.",,"```java\nimport javafx.application.Application;\nimport javafx.scene.Scene;\nimport javafx.scene.layout.StackPane;\nimport javafx.scene.media.Media;\nimport javafx.scene.media.MediaPlayer;\nimport javafx.scene.media.MediaView;\nimport javafx.stage.Stage;\n\npublic class SimpleMediaPlayback extends Application {\n\n    private static final String VIDEO_URL = \"[http://example.com/mock_video.mp4](http://example.com/mock_video.mp4)\";\n\n    @Override\n    public void start(Stage primaryStage) {\n        // Create Media object from URL\n        Media media = new Media(VIDEO_URL);\n\n        // Create MediaPlayer\n        MediaPlayer mediaPlayer = new MediaPlayer(media);\n        mediaPlayer.setAutoPlay(true); // Start playing automatically\n\n        // Create MediaView to display the media\n        MediaView mediaView = new MediaView(mediaPlayer);\n\n        // Add MediaView to a layout pane\n        StackPane root = new StackPane();\n        root.getChildren().add(mediaView);\n\n        // Set up the scene and stage\n        Scene scene = new Scene(root, 640, 480);\n        primaryStage.setTitle(\"Video Playback\");\n        primaryStage.setScene(scene);\n        primaryStage.show();\n\n        // Ensure media player is stopped when stage is closed\n        primaryStage.setOnCloseRequest(event -> mediaPlayer.stop());\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n```",,"This code demonstrates the basic usage of `Media` to define the source, `MediaPlayer` to control playback (with `setAutoPlay(true)` to start automatically), and `MediaView` to display the visual component of the media. A mock URL is used as actual video files cannot be directly embedded."
java_q57,mcq,hard,"Which of the following scenarios best represents an 'Association' relationship?", "A `Car` having `Engines` where an `Engine` cannot exist without a `Car`.\nA `Student` taking `Courses`, where both can exist independently.\nA `Dog` being a type of `Animal`.\nAn `Employee` managing other `Employee`s in a hierarchy.",1,"Association is a ""uses"" relationship where one class interacts with another, but neither owns the other. A `Student` taking `Courses` is a classic example: a student can exist without taking a course, and a course can exist without a particular student enrolled."
java_q58,true_false,hard,"The `Font` class in JavaFX allows setting the font size, name, and family.",,true,"True. The `Font` class provides properties and constructors to define the font's size, name (e.g., ""Arial""), and style (e.g., bold, italic), which includes its family."
java_q59,fill_in_the_blank,hard,"When dealing with `MouseEvent` in JavaFX, `getSceneX()` returns the x-coordinate of the mouse point relative to the `______`.", "scene",,"`getSceneX()` and `getSceneY()` provide the mouse coordinates relative to the `Scene` itself, regardless of the specific node that received the event."
java_q60,drag_drop,hard,"Match the JavaFX property type to its basic use.","drag1:StringProperty|drag2:DoubleProperty|drag3:BooleanProperty|drag4:ObjectProperty;drop1:Observable wrapper for a String value.|drop2:Observable wrapper for a double value.|drop3:Observable wrapper for a boolean value.|drop4:Observable wrapper for any Object.;drag1:drop1|drag2:drop2|drag3:drop3|drag4:drop4","","`StringProperty` wraps `String`. `DoubleProperty` wraps `double`. `BooleanProperty` wraps `boolean`. `ObjectProperty` wraps any `Object` type."
java_q61,trace_the_output,hard,"Given the `ObservablePropertyDemo` context, what will be printed if `balance.set(0.0)` is called after `balance.set(4.5)`?\n```java\nimport javafx.beans.property.DoubleProperty;\nimport javafx.beans.property.SimpleDoubleProperty;\nimport javafx.beans.value.Observable;\nimport javafx.beans.value.InvalidationListener;\n\npublic class ObservableDemo {\n    public static void main(String[] args) {\n        final DoubleProperty balance = new SimpleDoubleProperty();\n        balance.addListener(new InvalidationListener() {\n            @Override\n            public void invalidated(Observable ov) {\n                System.out.println(\"The new value is \" + balance.doubleValue());\n            }\n        });\n        balance.set(4.5);\n        balance.set(0.0);\n    }\n}\n```", "The new value is 4.5\nThe new value is 0.0",,"The `InvalidationListener` is triggered every time the property's value *changes*. So, both `balance.set(4.5)` (changing from default 0.0 to 4.5) and `balance.set(0.0)` (changing from 4.5 to 0.0) will trigger the `invalidated` method, printing the new value each time."
java_q62,write_full_code,hard,"Write the JavaFX code to create two `RadioButton`s, 'Option A' and 'Option B', that belong to the same `ToggleGroup` so only one can be selected at a time. Display them in a `VBox`.",,"```java\nimport javafx.application.Application;\nimport javafx.scene.Scene;\nimport javafx.scene.control.RadioButton;\nimport javafx.scene.control.ToggleGroup;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\n\npublic class RadioButtonGroup extends Application {\n    @Override\n    public void start(Stage primaryStage) {\n        RadioButton rb1 = new RadioButton(\"Option A\");\n        RadioButton rb2 = new RadioButton(\"Option B\");\n\n        ToggleGroup group = new ToggleGroup();\n        rb1.setToggleGroup(group);\n        rb2.setToggleGroup(group);\n\n        VBox root = new VBox(10); // Spacing of 10\n        root.getChildren().addAll(rb1, rb2);\n        Scene scene = new Scene(root, 200, 150);\n\n        primaryStage.setTitle(\"Radio Button Group\");\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n```",,"This code creates a `ToggleGroup` and assigns both `RadioButton`s to it using `setToggleGroup()`. This ensures that only one radio button within that group can be selected at any given time, providing mutual exclusivity."
java_q63,mcq,hard,"What is the significance of the `Override` annotation in the `handle` method of an `EventHandler` implementation?", "It forces the method to be static.|It indicates that the method is a new method not found in the interface.|It signals that the method is implementing or overriding a method from a superclass or interface.|It optimizes the method's performance.",2,"The `@Override` annotation is a compiler directive indicating that the method is intended to override or implement a method from a superclass or an interface. It helps catch potential errors, like typos in method names, that would otherwise lead to a new method being defined instead of an override."
java_q64,true_false,hard,"The `ScrollBar` control in JavaFX can only appear in a horizontal orientation.",,false,"False. The `ScrollBar` control can appear in both horizontal and vertical orientations, determined by its `orientation` property."
java_q65,fill_in_the_blank,hard,"JavaFX `ImageView` provides `fitWidth` and `fitHeight` properties, which specify the `______` of the bounding box within which the image is resized to fit.", "width and height",,"`fitWidth` and `fitHeight` control the dimensions of the bounding box for image resizing within the `ImageView`."
java_q66,drag_drop,hard,"Match the JavaFX `ComboBox` property to its function.","drag1:value|drag2:editable|drag3:onAction|drag4:items;drop1:The value selected in the combo box.|drop2:Specifies whether the combo box allows user input.|drop3:Specifies the handler for processing the action event.|drop4:The items in the combo box popup.;drag1:drop1|drag2:drop2|drag3:drop3|drag4:drop4","","`value` is the selected item. `editable` allows user input. `onAction` is the event handler. `items` holds the list of choices."
java_q67,trace_the_output,hard,"What is the output of this code snippet, demonstrating `ListView` selection?\n```java\nimport javafx.application.Application;\nimport javafx.collections.FXCollections;\nimport javafx.scene.Scene;\nimport javafx.scene.control.ListView;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\n\npublic class ListViewDemo extends Application {\n    @Override\n    public void start(Stage primaryStage) {\n        String[] items = {\"Apple\", \"Banana\", \"Cherry\"};\n        ListView<String> listView = new ListView<>(FXCollections.observableArrayList(items));\n        listView.getSelectionModel().select(1); // Selects the second item (index 1)\n        listView.getSelectionModel().selectedItemProperty().addListener((obs, oldVal, newVal) -> {\n            System.out.println(\"Selected: \" + newVal);\n        });\n\n        VBox root = new VBox(listView);\n        primaryStage.setScene(new Scene(root, 200, 150));\n        primaryStage.show();\n    }\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n// No user interaction after initial selection.\n```", "Selected: Banana",,"The `listView.getSelectionModel().select(1);` programmatically selects the item at index 1 ("Banana"). This action triggers the `selectedItemProperty()` listener, which then prints the newly selected value to the console."
java_q68,write_full_code,hard,"Write the JavaFX code to create a `CheckBox` labeled ""Bold"" and another labeled ""Italic"". Set the ""Bold"" checkbox to be initially selected.",,"```java\nimport javafx.application.Application;\nimport javafx.scene.Scene;\nimport javafx.scene.control.CheckBox;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\n\npublic class CheckBoxDemo extends Application {\n    @Override\n    public void start(Stage primaryStage) {\n        CheckBox boldCheckBox = new CheckBox(\"Bold\");\n        CheckBox italicCheckBox = new CheckBox(\"Italic\");\n\n        boldCheckBox.setSelected(true); // Set 'Bold' as initially selected\n\n        VBox root = new VBox(10); // Spacing of 10\n        root.getChildren().addAll(boldCheckBox, italicCheckBox);\n        Scene scene = new Scene(root, 200, 150);\n\n        primaryStage.setTitle(\"Check Box Demo\");\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n```",,"This code creates two `CheckBox` controls. The `setSelected(true)` method is used on the `boldCheckBox` to make it appear checked from the start. Both are added to a `VBox` for vertical arrangement."
java_q69,mcq,hard,"Which of the following is NOT true about `ActionEvent` in JavaFX?", "It is a subclass of `Event`.|It represents events triggered by ""actions"" like a button click.|It is a generic type parameter indicating the type of event an `EventHandler` will handle.|It can hold information about the event itself in its `event` parameter.",2,"`<ActionEvent>` itself is *not* a generic type parameter; it is the concrete type of event. `EventHandler<T>` has `T` as a generic type parameter, and `ActionEvent` is often passed as `T`."
java_q70,true_false,hard,"The `ImageView` class creates an `Image` with contents loaded from a file or URL.",,false,"False. The `Image` class creates an `Image` with contents loaded from a file or URL. The `ImageView` class is then used to *display* an `Image` object."
java_q71,fill_in_the_blank,hard,"The `______` class in JavaFX provides core functionality for all animations.", "Animation",,"The `Animation` class serves as the abstract base class for all animations in JavaFX, providing fundamental properties and methods like `play()`, `pause()`, `stop()`."
java_q72,drag_drop,hard,"Match the JavaFX object to its general purpose.","drag1:Stage|drag2:Scene|drag3:Node|drag4:Control|drag5:Shape;drop1:Top-level window for JavaFX applications.|drop2:Container for all graphical content within a stage.|drop3:Abstract base class for all items in the scene graph.|drop4:Base class for interactive UI components.|drop5:Base class for drawing geometric figures.;drag1:drop1|drag2:drop2|drag3:drop3|drag4:drop4|drag5:drop5","","`Stage` is the window. `Scene` is the content holder. `Node` is the base for all graphical elements. `Control` is for UI components. `Shape` is for drawing."
java_q73,trace_the_output,hard,"What is the output from `myHouse.getAddress()` if `myHouse` is created as `new House(""123 Main St"")`?\n```java\npublic class House {\n    private String address;\n    private List<Room> rooms = new ArrayList<>();\n    public House(String address) { this.address = address; }\n    public void addRoom(String type, int size) { rooms.add(new Room(type, size)); }\n    public String getAddress() { return address; }\n}\n// Assume Room class is defined.\n```", "123 Main St",,"The `getAddress()` method of the `House` class simply returns the `address` string that was passed to its constructor, which is ""123 Main St""."
java_q74,write_full_code,hard,"Write the JavaFX code to create a `Slider` with a range from 0 to 100, an initial value of 50, and display its current integer value in a `Label` that updates dynamically as the slider is moved. Use `valueProperty().addListener`.",,"```java\nimport javafx.application.Application;\nimport javafx.beans.value.ChangeListener;\nimport javafx.beans.value.ObservableValue;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.Slider;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\n\npublic class SliderWithLabel extends Application {\n    @Override\n    public void start(Stage primaryStage) {\n        Label valueLabel = new Label(\"50\"); // Initial value display\n\n        Slider slider = new Slider(0, 100, 50); // Min, Max, Initial Value\n        slider.setShowTickLabels(true); // Optional: show numerical labels\n        slider.setShowTickMarks(true); // Optional: show tick marks\n\n        // Add listener to update label\n        slider.valueProperty().addListener(new ChangeListener<Number>() {\n            @Override\n            public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {\n                valueLabel.setText(String.valueOf(newValue.intValue()));\n            }\n        });\n\n        VBox root = new VBox(10); // Spacing\n        root.getChildren().addAll(slider, valueLabel);\n        Scene scene = new Scene(root, 300, 150);\n\n        primaryStage.setTitle(\"Slider Label Demo\");\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n```",,"This code sets up a `Slider` and a `Label`. A `ChangeListener` is added to the `slider.valueProperty()` to react to changes in the slider's value. The `changed` method updates the `valueLabel`'s text using the integer part of the new value from the slider."
java_q75,mcq,hard,"What is the key principle behind 'Event-Driven Programming'?", "Code executes in a strict, predefined sequential order.|Code execution is primarily determined by object interactions and method calls.|Code execution is triggered and controlled by events generated by user actions or system notifications.|Code is written in a functional style to avoid side effects.",2,"In event-driven programming, the flow of the program is determined by events. Instead of following a strict sequential path, the program waits for events to occur (like a button click, key press, or network data arrival) and then executes specific code (event handlers) in response to those events."
java_q76,true_false,hard,"A `ComboBox` in JavaFX can only display a static list of items that cannot be updated dynamically.",,false,"False. `ComboBox`s, along with `ListView`s, use `ObservableList`s for their items. `ObservableList`s can be dynamically updated (items added, removed, or changed), and the UI will automatically reflect these changes."
java_q77,fill_in_the_blank,hard,"The `______` class is the base class for all graphical elements in the JavaFX scene graph.", "Node",,"`Node` is the fundamental building block in the JavaFX scene graph, serving as the base class for all visual elements like shapes, controls, and panes."
java_q78,drag_drop,hard,"Match the JavaFX coordinate system property to its characteristic.","drag1:JavaFX Coordinate System (0,0)|drag2:Conventional Coordinate System (0,0);drop1:Top-left corner of the drawing area.|drop2:Center of the drawing area.;drag1:drop1|drag2:drop2","","The JavaFX coordinate system places the origin (0,0) at the top-left corner. The conventional coordinate system places the origin (0,0) at the center."
java_q79,trace_the_output,hard,"What is the output after executing this `ComboBox` setup and changing the selection from 'Canada' to 'USA'?\n```java\nimport javafx.application.Application;\nimport javafx.collections.FXCollections;\nimport javafx.scene.Scene;\nimport javafx.scene.control.ComboBox;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\n\npublic class ComboBoxSelection extends Application {\n    @Override\n    public void start(Stage primaryStage) {\n        ComboBox<String> comboBox = new ComboBox<>(FXCollections.observableArrayList(\"Canada\", \"USA\", \"Mexico\"));\n        comboBox.setValue(\"Canada\"); // Initial selection\n        comboBox.setOnAction(event -> {\n            System.out.println(\"Selected: \" + comboBox.getValue());\n        });\n\n        VBox root = new VBox(comboBox);\n        primaryStage.setScene(new Scene(root, 200, 150));\n        primaryStage.show();\n    }\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n// Assume user changes selection from 'Canada' to 'USA' after launch.\n```", "Selected: USA",,"When the user selects 'USA' in the `ComboBox`, an `ActionEvent` is fired. The `setOnAction` listener's `handle` method is then executed. Inside this method, `comboBox.getValue()` will return the newly selected value, ""USA"", which is then printed."
java_q80,write_full_code,hard,"Write the Java code for a simple `Animal` class with a `name` and `age`, and a `Dog` class that `extends` `Animal`, adding a `breed` property. Override the `speak()` method from `Animal` in `Dog` to print ""Woof!"". This demonstrates 'Inheritance'.",,"```java\npublic class Animal {\n    private String name;\n    private int age;\n\n    public Animal(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public void speak() {\n        System.out.println(\"Animal sound\");\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n\npublic class Dog extends Animal {\n    private String breed;\n\n    public Dog(String name, int age, String breed) {\n        super(name, age); // Call the superclass constructor\n        this.breed = breed;\n    }\n\n    @Override // Annotation indicating method override\n    public void speak() {\n        System.out.println(\"Woof!\");\n    }\n\n    public void bark() {\n        System.out.println(\"Bark bark!\");\n    }\n\n    public String getBreed() {\n        return breed;\n    }\n}\n```",,"This code exemplifies Inheritance: `Dog` is a specialized `Animal`. It inherits `name` and `age` and adds `breed`. The `speak()` method is overridden in `Dog` to provide a dog-specific sound, demonstrating polymorphic behavior."
java_q81,mcq,hard,"Which of the following statements is true about `EventHandler<ActionEvent>`?", "It is a class that must be extended by GUI components.|It is an interface that defines the `handle` method for processing `ActionEvent`s.|It is an abstract class that provides default implementations for event handling.|It is used to create new `ActionEvent` objects.",1,"`EventHandler<ActionEvent>` is an interface in JavaFX. Its purpose is to define the contract for handling `ActionEvent`s, which means any class implementing this interface must provide an implementation for its `handle(ActionEvent event)` method."
java_q82,true_false,hard,"The `MediaView` class has properties like `x`, `y`, `fitWidth`, and `fitHeight` to control the position and size of the displayed media.",,true,"True. `MediaView` provides these properties to allow precise control over how the media content is positioned and scaled within the UI."
java_q83,fill_in_the_blank,hard,"In `HBox` and `VBox` layout panes, the `_______` property defines the gap between two adjacent nodes.", "spacing",,"The `spacing` property in `HBox` and `VBox` controls the amount of empty space between child nodes placed within the pane."
java_q84,drag_drop,hard,"Match the JavaFX `Node` property to its description.","drag1:style|drag2:rotate;drop1:Sets a JavaFX CSS style for the node.|drop2:Rotates the node by a specified angle.;drag1:drop1|drag2:drop2","","The `style` property allows applying CSS styling directly to a node. The `rotate` property controls the rotational transformation of a node."
java_q85,trace_the_output,hard,"What would be the output if the 'Cancel' button (using an inner class handler) is clicked?\n```java\nimport javafx.application.Application;\nimport javafx.event.ActionEvent;\nimport javafx.event.EventHandler;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Button;\nimport javafx.scene.layout.HBox;\nimport javafx.stage.Stage;\n\npublic class HandleEvent extends Application {\n\n    public class OKHandlerClass implements EventHandler<ActionEvent> {\n        @Override\n        public void handle(ActionEvent e) {\n            System.out.println(\"OK button clicked\");\n        }\n    }\n\n    public class CancelHandlerClass implements EventHandler<ActionEvent> {\n        @Override\n        public void handle(ActionEvent e) {\n            System.out.println(\"Cancel button clicked\");\n        }\n    }\n\n    @Override\n    public void start(Stage primaryStage) {\n        Button btOK = new Button(\"OK\");\n        Button btCancel = new Button(\"Cancel\");\n\n        OKHandlerClass handler1 = new OKHandlerClass();\n        btOK.setOnAction(handler1);\n\n        CancelHandlerClass handler2 = new CancelHandlerClass();\n        btCancel.setOnAction(handler2);\n\n        HBox pane = new HBox(10);\n        pane.getChildren().addAll(btOK, btCancel);\n        primaryStage.setScene(new Scene(pane, 200, 100));\n        primaryStage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n// Assume the 'Cancel' button is clicked by the user after launch.\n```", "Cancel button clicked",,"When the 'Cancel' button is clicked, its specific `setOnAction` handler (`handler2`, an instance of `CancelHandlerClass`) is invoked. This `handle` method prints ""Cancel button clicked""."
java_q86,write_full_code,hard,"Write the JavaFX code to create a simple `Label` that displays an `Image` from the URL `https://placehold.co/50x50/FF0000/FFFFFF?text=IMG`. The label should have the text ""My Image"" and the image should be positioned to the right of the text. Use `ContentDisplay.RIGHT`.",,"```java\nimport javafx.application.Application;\nimport javafx.geometry.Pos;\nimport javafx.scene.Scene;\nimport javafx.scene.control.ContentDisplay;\nimport javafx.scene.control.Label;\nimport javafx.scene.image.Image;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.layout.StackPane;\nimport javafx.stage.Stage;\n\npublic class LabelWithImage extends Application {\n    @Override\n    public void start(Stage primaryStage) {\n        // Load the image\n        Image image = new Image(\"[https://placehold.co/50x50/FF0000/FFFFFF?text=IMG](https://placehold.co/50x50/FF0000/FFFFFF?text=IMG)\", 50, 50, true, true);\n        ImageView imageView = new ImageView(image);\n\n        // Create the label with text and graphic\n        Label label = new Label(\"My Image\", imageView);\n        label.setContentDisplay(ContentDisplay.RIGHT); // Image to the right of text\n        label.setAlignment(Pos.CENTER); // Center content within the label if space allows\n\n        StackPane root = new StackPane();\n        root.getChildren().add(label);\n        Scene scene = new Scene(root, 250, 150);\n\n        primaryStage.setTitle(\"Label with Graphic\");\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n```",,"This code creates a `Label` that combines text and an image. `ContentDisplay.RIGHT` is crucial here to position the `ImageView` to the right of the label's text. `Pos.CENTER` is added to align the content within the label."
java_q87,mcq,hard,"What is the significance of the `target` object in JavaFX's binding properties, as opposed to the `source` object?", "The `target` object's value dictates the `source` object's value.|The `target` object changes automatically when the `source` object changes.|The `target` object can only be `null`.|The `target` object is always a primitive data type.",1,"In JavaFX binding, the `target` object (or property) is bound to a `source` object (or property). When the `source` object's value changes, the `target` property is automatically updated to reflect that change. The flow of information is from source to target."
java_q88,true_false,hard,"JavaFX's `Rectangle` class has properties like `arcWidth` and `arcHeight` to draw rectangles with rounded corners.",,true,"True. The `Rectangle` class includes `arcWidth` and `arcHeight` properties which define the horizontal and vertical diameters of arcs at the corners, allowing for rounded rectangles."
java_q89,fill_in_the_blank,hard,"A `______` inner class is a local class without a name, defined and instantiated in a single step.", "anonymous",,"An `anonymous` inner class is a concise way to define and instantiate a class simultaneously, typically for one-time use implementations of interfaces or abstract classes."
java_q90,drag_drop,hard,"Match the JavaFX event class to the user action it primarily represents.","drag1:ActionEvent|drag2:MouseEvent|drag3:KeyEvent;drop1:Button click, text field enter, menu item selection.|drop2:Mouse movement, clicks, presses, releases.|drop3:Key press, key release, key typed.;drag1:drop1|drag2:drop2|drag3:drop3","","`ActionEvent` handles high-level actions. `MouseEvent` handles various mouse interactions. `KeyEvent` handles keyboard input."
java_q91,trace_the_output,hard,"Predict the output of the following Java code snippet, demonstrating Lambda Expression usage:\n```java\nimport javafx.application.Application;\nimport javafx.event.ActionEvent;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Button;\nimport javafx.scene.layout.StackPane;\nimport javafx.stage.Stage;\n\npublic class LambdaEventDemo extends Application {\n    @Override\n    public void start(Stage primaryStage) {\n        Button btn = new Button(\"Test\");\n        btn.setOnAction(e -> {\n            String message = (e.getSource() instanceof Button) ? ((Button) e.getSource()).getText() + \" clicked!\" : \"Unknown source clicked!\";\n            System.out.println(message);\n        });\n\n        StackPane root = new StackPane();\n        root.getChildren().add(btn);\n        primaryStage.setScene(new Scene(root, 200, 100));\n        primaryStage.show();\n    }\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n// Assume the button is clicked by the user after launch.\n```", "Test clicked!",,"The lambda expression's `handle` method is executed. `e.getSource()` returns the `Button` object. The `if` condition is true, so it casts to `Button` and gets its text (""Test""). It then concatenates "" clicked!"" and prints ""Test clicked!""."
java_q92,write_full_code,hard,"Write the JavaFX code to create a `Label` that displays an animated analog clock by creating an instance of `ClockPane` (assuming `ClockPane` is a reusable GUI component that renders a clock).",,"```java\nimport javafx.application.Application;\nimport javafx.scene.Scene;\nimport javafx.scene.layout.StackPane;\nimport javafx.stage.Stage;\n\n// Assuming ClockPane class is defined elsewhere, e.g.:\n// public class ClockPane extends Pane {\n//     // ... properties and methods for drawing a clock ...\n//     public ClockPane() { // ... animation setup ... }\n//     public void setCurrentTime() { // ... update clock hands ... }\n//     // ... etc.\n// }\n\npublic class DisplayClockApp extends Application {\n    @Override\n    public void start(Stage primaryStage) {\n        // Create an instance of the ClockPane\n        ClockPane clock = new ClockPane();\n\n        // You might want to update the time periodically for a live clock\n        // This part would typically be handled within the ClockPane itself\n        // or via a Timeline in this app.\n        // For simplicity, just display it.\n\n        StackPane root = new StackPane();\n        root.getChildren().add(clock);\n        Scene scene = new Scene(root, 300, 300);\n\n        primaryStage.setTitle(\"Analog Clock\");\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n```",,"This code demonstrates integrating a custom `ClockPane` (assumed to be a `Pane` subclass that draws a clock) into a simple JavaFX application. It highlights how reusable GUI components can be treated as regular nodes within the scene graph."
java_q93,mcq,hard,"In `ComboBoxBase<T>`, the generic type parameter `T` refers to:", "The type of the `ComboBox` itself.|The type of the event handled by the `ComboBox`.|The type of items stored in the `ComboBox`.|The type of the `ComboBox`'s `SelectionModel`.",2,"The generic type parameter `T` in `ComboBoxBase<T>` (and `ComboBox<T>`) specifies the data type of the items that the combo box will hold and display. For example, `ComboBox<String>` holds strings, and `ComboBox<Country>` holds `Country` objects."
java_q94,true_false,hard,"The `TableView` control is used to choose a single value or multiple values from a list, similar to a `ListView`.",,false,"False. `TableView` displays data in a tabular (rows and columns) format. `ListView` allows choosing single or multiple values from a single list."
java_q95,fill_in_the_blank,hard,"In event-driven programming, `______` are objects that contain a method for processing an event.", "listeners",,"`Listeners` (or event handlers) are objects that are registered with an event source and contain the logic (the `handle` method) to process specific types of events when they occur."
java_q96,drag_drop,hard,"Match the JavaFX control to its hierarchy/inheritance.","drag1:Label|drag2:Button|drag3:TextField;drop1:Labeled|drop2:ButtonBase|drop3:TextInputControl;drag1:drop1|drag2:drop2|drag3:drop3","","`Label` extends `Labeled`. `Button` extends `ButtonBase` (which extends `Labeled`). `TextField` extends `TextInputControl`."
java_q97,trace_the_output,hard,"What is the output if you run this simple Java program?\n```java\npublic class SimplePrint {\n    public static void main(String[] args) {\n        int x = 5;\n        if (x > 3) {\n            System.out.println(\"X is greater than 3\");\n        } else if (x < 5) {\n            System.out.println(\"X is less than 5\");\n        } else {\n            System.out.println(\"X is 5\");\n        }\n    }\n}\n```", "X is greater than 3",,"The `if` condition `(x > 3)` (which is `5 > 3`) evaluates to `true`. Therefore, the first `System.out.println()` statement is executed, and the subsequent `else if` and `else` blocks are skipped."
java_q98,write_full_code,hard,"Write the JavaFX code to display a simple `Text` node with the content ""Programming is fun"" and set its X and Y coordinates to (50, 50).",,"```java\nimport javafx.application.Application;\nimport javafx.scene.Scene;\nimport javafx.scene.layout.StackPane;\nimport javafx.scene.text.Text;\nimport javafx.stage.Stage;\n\npublic class BasicTextDisplay extends Application {\n    @Override\n    public void start(Stage primaryStage) {\n        // Create a Text node\n        Text text = new Text(50, 50, \"Programming is fun\");\n\n        // Add the text node to a layout pane\n        StackPane root = new StackPane();\n        root.getChildren().add(text);\n\n        // Set up the scene and stage\n        Scene scene = new Scene(root, 300, 200);\n        primaryStage.setTitle(\"Text Demo\");\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n\n    public static void main(String[] args) {\n        launch(args);\n    }\n}\n```",,"This code uses the `Text` class to display a string at a specified (x, y) coordinate. The `Text(double x, double y, String text)` constructor directly sets the position and content."
java_q99,mcq,hard,"Which of the following is true about `Anonymous Inner Classes` in Java?", "They can have an explicit `extends` or `implements` clause.|They are compiled into a class named `OuterClassName.class`.|They combine declaring an inner class and creating an instance in one step.|They can always access non-static members of the outer class even if declared static.",2,"Anonymous inner classes are defined and instantiated in a single step, without an explicit name. They cannot have `extends` or `implements` clauses directly (the compiler infers it), and they are compiled into `OuterClassName$n.class` (e.g., `Test$1.class`). A static inner class (not anonymous) can't access non-static outer members."
java_q100,true_false,hard,"The `PathTransition` class in JavaFX is specifically used to animate the change of a node's opacity over time.",,false,"False. The `FadeTransition` class is used to animate opacity. `PathTransition` animates the movement of a node along a defined path (`Shape` outline)."
